@page "/companies/{id:guid}"
@using Hair.Application.Common.Dto.Schedule
@using Hair.Application.Common.Dto.Barber
@using Hair.Application.Common.Interfaces
@using Hair.Application.Schedules.Queries
@using MediatR

@using Color = Blazorise.Color

@using Blazorise
@inject ICompanyService CompanyService
@inject IMediator Mediator


<h3>CompanyDetails</h3>

@if (_barbers.Any())
{
    <ul>
        @foreach (var barber in _barbers)
        {
            <li>
                <NavLink class="nav-link" href="@($"/{barber.BarberId}")">@barber.BarberName</NavLink>
                <p><strong>Company: </strong> @barber.CompanyName</p>
                
                <Button Color="Color.Info" Clicked="() => SelectedBarber(barber.BarberId)">
                    Check free appointments here!
                </Button>
            </li>
        }
    </ul>
}
else
{
    <p>There are no barbers available right now!</p>
}

<Card>
    <CardBody>
        <DatePicker TValue="DateTime?" @bind-Date="_selectedDate" />
        <DatePicker Date="@_selectedDate" DateChanged="@((DateTime? date) => OnDateSelected(date))"></DatePicker>
        <DatePicker TValue="DateTime?" @bind-Date="_selectedDate" InputFormat="dd.MM.yyyy" DisplayFormat="dd.MM.yyyy" />
    </CardBody>
</Card>

@if (_freeAppointments.Any())
{
    <ListGroup>
        @foreach (var appointment in _freeAppointments)
        {
            <ListGroupItem>
                <Text>@appointment.dateAndTime.ToString("HH:mm:ss")</Text>
            </ListGroupItem>
        }
    </ListGroup>
}








@code {
    [Parameter]
    public Guid berber { get; set; }
    //private string _dateFormat = "dd.MM.yyyy";
    private DateTime? _selectedDate = DateTime.Today;
    private List<FreeAppointmentsCheckDto> _freeAppointments = new();
    private List<BarberFullDetailsDto> _barbers = new();
    //private string _bound = "not set";
    [Parameter] 
    public Guid Id { get; set; }
    
    
    
    protected override async Task OnInitializedAsync()
    {
        _barbers = await CompanyService.CompanyDetailsByIdAsync(Id, CancellationToken.None);
        StateHasChanged();
    }
    
    
    
    private async Task OnDateSelected(DateTime? newDate)
    {
        if (newDate.HasValue)
        {
            _selectedDate = newDate;
            await LoadFreeAppointments(berber);
        }
        StateHasChanged();
    }

    private async Task LoadFreeAppointments(Guid barberId)
    {
        var query = new GetAllFreeAppointmentsQuery(_selectedDate ?? DateTime.Today, barberId);
        _freeAppointments = await Mediator.Send(query);
        StateHasChanged();
    }

    private async Task SelectedBarber(Guid barberId)
    {
        berber = barberId;
        Console.WriteLine("barber id je : " + berber);
        
        await LoadFreeAppointments(berber);
        StateHasChanged();
    }
    
    
}